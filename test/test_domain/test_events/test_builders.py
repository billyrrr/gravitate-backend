from unittest import TestCase

from gravitate.domain.location import Location
from gravitate.domain.event.builders_new import AirportEventBuilder, FbEventBuilder, build_ucsb_event
from gravitate.domain.event.models import AirportEvent, SocialEvent, CampusEvent
from gravitate.domain.location.models import LocationFactory
from test import scripts


class FbEventBuilderTest(TestCase):
    # builder: AirportEventBuilder = None

    maxDiff = None
    fbDict = {
        "description": "Advance Sale begins Friday, 6/1 at 11AM PDT\nwww.coachella.com",
        "end_time": "2019-04-14T23:59:00-0700",
        "name": "Coachella Valley Music and Arts Festival 2019 - Weekend 1",
        "place": {
            "name": "Coachella",
            "location": {
                "latitude": 33.679974,
                "longitude": -116.237221
            },
            "id": "20281766647"
        },
        "start_time": "2019-04-12T12:00:00-0700",
        "id": "137943263736990"
    }
    eventDict = {
        "eventCategory": "social",
        "isClosed": False,
        "targets": [
            {'eventCategory': 'social', 'toEvent': True,
             'arriveAtEventTime': {'earliest': 1555077600, 'latest': 1555088400}},
            {'eventCategory': 'social', 'toEvent': False,
             'leaveEventTime': {'earliest': 1555318740, 'latest': 1555329540}},
        ],
        "localDateString": "2019-04-12",
        "pricing": 123456789,
        "parkingInfo": None,
        "description":  "Advance Sale begins Friday, 6/1 at 11AM PDT\nwww.coachella.com",
        "name": "Coachella Valley Music and Arts Festival 2019 - Weekend 1",
        "fbEventId": "137943263736990",
        # "locationRef": "/locations/testlocationid1",
        "participants": []
    }

    def setUp(self):
        self.c = scripts.SetUpTestDatabase()
        self.c.clear_before()
        self.c.generate_test_data(start_string="2018-12-17T08:00:00.000", num_days=1)

    def tearDown(self):
        """
        TODO: delete Location object generated by the builder
        :return:
        """
        self.c.clear_after()

    def testBuildDict(self):
        """
        TODO: write expected_d
        :return:
        """
        userId = 'testuserid1'
        # d = FormDictFactory().create(hasEarliestLatest=False, returnDict=True)

        b = FbEventBuilder()
        b.build_with_fb_dict(self.fbDict)

        expected_d = self.eventDict

        self.assertIsNotNone(b._event_dict["locationRef"].id)

        print(b._event_dict)

        # Assert that all required variables are set
        self.assertDictContainsSubset(expected_d, b._event_dict)

    def testExport(self):
        event_dict = self.eventDict.copy()
        # event_dict.pop("locationRef")
        b = FbEventBuilder()
        b.build_with_fb_dict(self.fbDict)
        e = b.export_as_class(SocialEvent)
        self.assertDictContainsSubset(event_dict, e.to_dict())


class EventBuilderMethodTest(TestCase):

    def setUp(self):
        self.fb_dict = {
            "description": "Advance Sale begins Friday, 6/1 at 11AM PDT\nwww.coachella.com",
            "end_time": "2019-04-14T23:59:00-0700",
            "name": "Coachella Valley Music and Arts Festival 2019 - Weekend 1",
            "place": {
                "name": "Coachella",
                "location": {
                    "latitude": 33.679974,
                    "longitude": -116.237221
                },
                "id": "20281766647"
            },
            "start_time": "2019-04-12T12:00:00-0700",
            "id": "137943263736990"
        }

    def test_start_time_local(self):
        b = FbEventBuilder()
        b._build_start_time(self.fb_dict)
        targets = b._event_dict["targets"]
        self.assertIn({'eventCategory': 'social', 'toEvent': True,
                       'arriveAtEventTime': {'earliest': 1555077600, 'latest': 1555088400}}, targets)

    def test_end_time_local(self):

        b = FbEventBuilder()
        b._build_end_time(self.fb_dict)
        targets = b._event_dict["targets"]
        self.assertIn({'eventCategory': 'social', 'toEvent': False,
                       'leaveEventTime': {'earliest': 1555318740, 'latest': 1555329540}}, targets)

    def test_fb_event_id(self):
        b = FbEventBuilder()
        b._build_fb_event_id(self.fb_dict)
        self.assertEqual(b._event_dict["fbEventId"], "137943263736990")


class CampusEventBuilderTest(TestCase):

    maxDiff = None

    def setUp(self):
        self._to_delete = list()

        campusLocation = LocationFactory.from_code("UCSB", "campus")
        campusLocation.save()
        self._to_delete.append(campusLocation.doc_ref)
        self.event_dict = {
            "eventCategory": "campus",
            "campusCode": "UCSB",
            "isClosed": False,
            "targets": [
                {
                    'eventCategory': 'campus',
                    'toEvent': True,
                    'arriveAtEventTime': {'earliest': 1545033600, 'latest': 1545119999}
                },
                {
                    'eventCategory': 'campus',
                    'toEvent': False,
                    'leaveEventTime': {'earliest': 1545033600, 'latest': 1545119999}
                }
            ],
            "localDateString": "2018-12-17",
            "pricing": 123456789,
            "parkingInfo": {
                "parkingAvailable": False,
                "parkingPrice": 0,
                "parkingLocation": "none"
            },
            "description": "UCSB on 2018-12-17",
            "name": "UCSB",
            "locationRef": "/locations/testlocationid1",
            "participants": []
        }
        # self.event = CampusEvent.from_dict(event_dict)

    def tearDown(self):
        for ref in self._to_delete:
            ref.delete()

    def test_build_ucsb_event(self):

        args = tuple([1545033600.0, 1545119999.0, "2018-12-17"])
        start_timestamp, end_timestamp, local_date_string = args
        e = build_ucsb_event(start_timestamp=start_timestamp,
                             end_timestamp=end_timestamp,
                             local_date_string=local_date_string)

        event_to_dict = e.to_dict()
        self.assertIn("locationRef", event_to_dict)
        expected_dict = self.event_dict.copy()
        expected_dict.pop("locationRef")
        self.assertDictContainsSubset(expected_dict, event_to_dict)


class EventNewBuilderTest(TestCase):
    # builder: AirportEventBuilder = None

    maxDiff = None
    eventDict = {
        "airportCode": "LAX",
        "eventCategory": "airport",
        "isClosed": False,
        "targets": [
            {
                'eventCategory': 'airport',
                'toEvent': True,
                'arriveAtEventTime': {'earliest': 1545033600, 'latest': 1545119999}
            },
            {
                'eventCategory': 'airport',
                'toEvent': False,
                'leaveEventTime': {'earliest': 1545033600, 'latest': 1545119999}
            }
        ],
        "localDateString": "2018-12-17",
        "pricing": 123456789,
        "parkingInfo": {
            "parkingAvailable": False,
            "parkingPrice": 0,
            "parkingLocation": "none"
        },
        "description": "what the event is",
        "name": "name of the event",
        "locationRef": "/locations/testlocationid1",
        "participants": []
    }

    def setUp(self):
        self.c = scripts.SetUpTestDatabase()
        self.c.clear_before()
        self.c.generate_test_data(start_string="2018-12-17T08:00:00.000", num_days=1)

    def tearDown(self):
        self.c.clear_after()

    def testBuildDict(self):
        """
        TODO: finish
        :return:
        """
        userId = 'testuserid1'
        # d = FormDictFactory().create(hasEarliestLatest=False, returnDict=True)

        b = AirportEventBuilder()
        b.build_airport("LAX")
        b.build_basic_info()
        b._build_target(to_event=True, start_timestamp=1545033600, end_timestamp=1545119999)
        b._build_target(to_event=False, start_timestamp=1545033600, end_timestamp=1545119999)
        b.build_descriptions("what the event is", "name of the event")
        b._build_parking(empty=True)
        b._build_local_date_string("2018-12-17")

        expected_d = self.eventDict.copy()
        expected_d.pop("locationRef")

        self.assertIsNotNone(b._event_dict["locationRef"].id)

        # Assert that all required variables are set
        self.assertDictContainsSubset(expected_d, b._event_dict)

    def testBuild(self):
        b = AirportEventBuilder()
        b.build_airport("LAX")
        b.build_basic_info()
        b._build_target(to_event=True, start_timestamp=1545033600, end_timestamp=1545119999)
        b._build_target(to_event=False, start_timestamp=1545033600, end_timestamp=1545119999)
        b.build_descriptions("what the event is", "name of the event")
        b._build_parking(empty=True)
        b._build_local_date_string("2018-12-17")
        ae = b.export_as_class(AirportEvent)
        self.assertIsNotNone(ae, "AirportEvent should be built")
        expected_subset = self.eventDict.copy()
        expected_subset.pop("locationRef")
        self.assertIsNotNone(ae.to_dict()["locationRef"].id)
        self.assertDictContainsSubset(expected_subset, ae.to_dict())
